name: Build lsquic (Linux/Windows/macOS/Android)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: ubuntu-latest
            target: android
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Linux ----------
      - name: Install dependencies (Linux)
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++ \
            libssl-dev zlib1g-dev libevent-dev

      - name: Build (Linux)
        if: matrix.target == 'linux'
        run: |
          mkdir build && cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release \
            -DOPENSSL_ROOT_DIR=/usr \
            -DOPENSSL_LIBRARIES=/usr/lib/x86_64-linux-gnu \
            -DZLIB_ROOT=/usr
          ninja

      # ---------- Windows ----------
      - name: Install dependencies (Windows)
        if: matrix.target == 'windows'
        run: choco install -y ninja openssl

      - name: Build (Windows)
        if: matrix.target == 'windows'
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release `
            -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL-Win64" `
            -DOPENSSL_LIBRARIES="C:/Program Files/OpenSSL-Win64/lib"
          ninja

      # ---------- macOS ----------
      - name: Install dependencies (macOS)
        if: matrix.target == 'macos'
        run: |
          brew update
          brew install ninja openssl zlib libevent || true

      - name: Build (macOS)
        if: matrix.target == 'macos'
        run: |
          mkdir build && cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DZLIB_ROOT=$(brew --prefix zlib)
          ninja

      # ---------- Android ----------
      - name: Set up Android NDK
        if: matrix.target == 'android'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26d-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME
          echo "ANDROID_NDK_HOME=$HOME/android-ndk-r26d" >> $GITHUB_ENV
          echo "$HOME/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build Android (all ABIs)
        if: matrix.target == 'android'
        run: |
          ABIS=("arm64-v8a" "armeabi-v7a" "x86" "x86_64")
          for ABI in "${ABIS[@]}"; do
            echo "Building Android ABI: $ABI"
            mkdir -p build_$ABI && cd build_$ABI
            cmake .. \
              -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
              -DANDROID_ABI=$ABI \
              -DANDROID_PLATFORM=21
            ninja
            cd ..
          done

      # ---------- Upload artifacts for CI ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lsquic-${{ matrix.target }}
          path: |
            build/bin/*
            build_arm64-v8a/bin/*
            build_armeabi-v7a/bin/*
            build_x86/bin/*
            build_x86_64/bin/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create zip packages
        run: |
          mkdir release
          for dir in artifacts/*; do
            pkg=$(basename $dir).zip
            cd $dir
            zip -r ../../release/$pkg *
            cd ../..
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
